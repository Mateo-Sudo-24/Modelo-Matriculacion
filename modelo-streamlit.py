import streamlit as st
import numpy as np
import joblib
import os

def predecir_matricula(edad, genero, nivel_educativo, ingresos_mensuales,
                       ocupacion, interes_tema, uso_tecnologia, horas_disponibles,
                       promociones_recibidas):
    try:
        # Codificar variables categ√≥ricas con LabelEncoder
        genero_encoded = encoders['genero'].transform([genero])[0]
        nivel_encoded = encoders['nivel_educativo'].transform([nivel_educativo])[0]
        ocupacion_encoded = encoders['ocupacion'].transform([ocupacion])[0]

        # Construir vector en el orden correcto
        X = [[
            edad,
            genero_encoded,
            nivel_encoded,
            ingresos_mensuales,
            ocupacion_encoded,
            interes_tema,
            uso_tecnologia,
            horas_disponibles,
            promociones_recibidas
        ]]

        # Predicci√≥n
        pred = modelo.predict(X)[0]
        return f"‚úÖ Predicci√≥n: {pred}"

    except Exception as e:
        return f"‚ùå Error en la predicci√≥n: {e}"


# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n de Matr√≠cula",
    page_icon="üéì",
    layout="wide"
)

# Funci√≥n para cargar modelos con cach√©
@st.cache_resource
def cargar_modelos():
    """Carga el modelo y encoders desde archivos PKL"""
    try:
        # Verificar si los archivos existen (con nombres alternativos)
        modelo_files = ['modelo.pkl', 'modelo_entrenado.pkl']
        encoder_files = ['encoders.pkl', 'encoders_entrenados.pkl']
        
        modelo_file = None
        encoder_file = None
        
        # Buscar archivo del modelo
        for file in modelo_files:
            if os.path.exists(file):
                modelo_file = file
                break
        
        # Buscar archivo de encoders
        for file in encoder_files:
            if os.path.exists(file):
                encoder_file = file
                break
        
        if modelo_file is None:
            raise FileNotFoundError("No se encontr√≥ ning√∫n archivo de modelo (modelo.pkl o modelo_entrenado.pkl)")
        
        if encoder_file is None:
            raise FileNotFoundError("No se encontr√≥ ning√∫n archivo de encoders (encoders.pkl o encoders_entrenados.pkl)")
        
        # Cargar modelo entrenado
        modelo = joblib.load(modelo_file)
        st.info(f"‚úÖ Modelo cargado desde: {modelo_file}")
        
        # Cargar encoders
        encoders = joblib.load(encoder_file)
        st.info(f"‚úÖ Encoders cargados desde: {encoder_file}")
        
        return modelo, encoders
        
    except FileNotFoundError as e:
        return None, None, str(e)
    except Exception as e:
        return None, None, f"Error al cargar los modelos: {e}"

# Cargar modelos al inicio
resultado = cargar_modelos()

if len(resultado) == 3:  # Hay error
    modelo, encoders, error_msg = resultado
    st.error(f"‚ùå {error_msg}")
    st.error("Aseg√∫rate de que los archivos 'modelo.pkl' y 'encoders.pkl' est√©n en el directorio actual")
    
    # Mostrar archivos disponibles en el directorio
    archivos_disponibles = [f for f in os.listdir('.') if f.endswith('.pkl')]
    if archivos_disponibles:
        st.info(f"Archivos .pkl encontrados: {', '.join(archivos_disponibles)}")
    else:
        st.warning("No se encontraron archivos .pkl en el directorio actual")
    
    st.stop()
else:
    modelo, encoders = resultado

# T√≠tulo y descripci√≥n
st.title("üéì Predicci√≥n de Matr√≠cula")
st.markdown("Ingresa los datos del estudiante para predecir si se matricular√° (0 = No, 1 = S√≠).")

# Verificar que los modelos se cargaron correctamente
if modelo is not None and encoders is not None:
    st.success("‚úÖ Modelos cargados correctamente")
    
    # Mostrar informaci√≥n de los encoders disponibles
    with st.expander("üìä Informaci√≥n de los encoders cargados"):
        st.write("**Encoders disponibles:**")
        for key, encoder in encoders.items():
            st.write(f"- **{key}**: {list(encoder.classes_)}")

    # Obtener listas de clases desde los LabelEncoders
    try:
        generos = encoders['genero'].classes_.tolist()
        niveles_educativos = encoders['nivel_educativo'].classes_.tolist()
        ocupaciones = encoders['ocupacion'].classes_.tolist()
        
        # Crear formulario con columnas para mejor organizaci√≥n
        with st.form("prediction_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("Datos Personales")
                edad = st.number_input(
                    "Edad",
                    min_value=0,
                    max_value=100,
                    value=25,
                    step=1
                )
                
                genero = st.selectbox(
                    "G√©nero",
                    options=generos,
                    index=0
                )
                
                nivel_educativo = st.selectbox(
                    "Nivel educativo",
                    options=niveles_educativos,
                    index=0
                )
                
                ingresos_mensuales = st.number_input(
                    "Ingresos mensuales",
                    min_value=0.0,
                    value=1000.0,
                    step=100.0,
                    format="%.2f"
                )
                
                ocupacion = st.selectbox(
                    "Ocupaci√≥n",
                    options=ocupaciones,
                    index=0
                )
            
            with col2:
                st.subheader("Preferencias y Disponibilidad")
                interes_tema = st.slider(
                    "Inter√©s en el tema",
                    min_value=0,
                    max_value=5,
                    value=3,
                    step=1
                )
                
                uso_tecnologia = st.slider(
                    "Uso de tecnolog√≠a",
                    min_value=0,
                    max_value=5,
                    value=3,
                    step=1
                )
                
                horas_disponibles = st.slider(
                    "Horas disponibles",
                    min_value=0,
                    max_value=24,
                    value=8,
                    step=1
                )
                
                promociones_recibidas = st.slider(
                    "Promociones recibidas",
                    min_value=0,
                    max_value=20,
                    value=5,
                    step=1
                )
            
            # Bot√≥n de predicci√≥n
            submit_button = st.form_submit_button(
                "üîÆ Realizar Predicci√≥n",
                use_container_width=True
            )

        # Procesar predicci√≥n cuando se env√≠a el formulario
        if submit_button:
            with st.spinner('Realizando predicci√≥n...'):
                resultado = predecir_matricula(
                    edad, genero, nivel_educativo, ingresos_mensuales,
                    ocupacion, interes_tema, uso_tecnologia, horas_disponibles,
                    promociones_recibidas
                )
            
            # Mostrar resultado
            if "‚úÖ" in resultado:
                st.success(resultado)
                # Interpretar el resultado
                pred_value = resultado.split(": ")[1]
                if pred_value == "1":
                    st.balloons()
                    st.info("üéâ El estudiante tiene alta probabilidad de matricularse")
                else:
                    st.info("üìä El estudiante tiene baja probabilidad de matricularse")
            else:
                st.error(resultado)
                
    except KeyError as e:
        st.error(f"‚ùå Error: No se encontr√≥ el encoder para {e}")
        st.error("Verifica que el archivo 'encoders.pkl' contenga los encoders necesarios: 'genero', 'nivel_educativo', 'ocupacion'")
        st.stop()
        
else:
    st.error("‚ùå No se pudieron cargar los modelos")
    st.stop()

# Informaci√≥n adicional
with st.expander("‚ÑπÔ∏è Informaci√≥n sobre los par√°metros"):
    st.markdown("""
    **Descripci√≥n de los par√°metros:**
    
    - **Edad**: Edad del estudiante en a√±os
    - **G√©nero**: G√©nero del estudiante
    - **Nivel educativo**: Nivel de educaci√≥n completado
    - **Ingresos mensuales**: Ingresos econ√≥micos mensuales
    - **Ocupaci√≥n**: Ocupaci√≥n actual del estudiante
    - **Inter√©s en el tema**: Nivel de inter√©s (0-5, donde 5 es muy alto)
    - **Uso de tecnolog√≠a**: Familiaridad con tecnolog√≠a (0-5)
    - **Horas disponibles**: Horas disponibles para estudiar por d√≠a
    - **Promociones recibidas**: N√∫mero de promociones/ofertas recibidas
    """)

with st.expander("üîß Informaci√≥n t√©cnica"):
    st.markdown("""
    **Archivos requeridos:**
    - `modelo.pkl`: Modelo de machine learning entrenado
    - `encoders.pkl`: Diccionario con los LabelEncoders para variables categ√≥ricas
    
    **Estructura esperada del encoders.pkl:**
    ```python
    {
        'genero': LabelEncoder(),
        'nivel_educativo': LabelEncoder(), 
        'ocupacion': LabelEncoder()
    }
    ```
    """)

# Pie de p√°gina
st.markdown("---")
st.markdown("*Desarrollado con Streamlit y joblib* üöÄ")